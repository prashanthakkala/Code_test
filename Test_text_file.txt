import pdfplumber
from pdfminer.layout import LAParams
import pandas as pd

# Define LAParams with custom values
laparams = LAParams(
    char_margin=2.0,
    line_margin=0.5,
    word_margin=0.1,
    boxes_flow=0.5
)

# Initialize an empty list to store DataFrames from each page
all_data = []

# Open the PDF file
with pdfplumber.open("example.pdf") as pdf:
    for page_num, page in enumerate(pdf.pages):
        # Extract tables
        tables = page.extract_tables({
            "vertical_strategy": "lines",
            "horizontal_strategy": "lines",
            "intersection_tolerance": 5,
            "snap_tolerance": 3,
            "join_tolerance": 3,
            "edge_min_length": 10,
            "min_words_vertical": 1,
            "min_words_horizontal": 1
        })

        # Extract all text on the page
        all_text = page.extract_text(laparams=laparams)

        # Extract words from tables to identify the text inside tables
        table_texts = []
        for table in tables:
            if table:
                for row in table[1:]:  # Skip the header row
                    table_texts.extend(row)

        # Convert the table text list to a set for faster lookup
        table_text_set = set(table_texts)

        # Split the full text into lines
        all_text_lines = all_text.splitlines()

        # Filter out lines that are part of the table
        remaining_text_lines = []
        for line in all_text_lines:
            # Only keep lines that are not part of the table
            if not any(word in line for word in table_text_set):
                remaining_text_lines.append(line)

        # Join remaining text lines into a single string
        remaining_text_str = "\n".join(remaining_text_lines)

        # Convert the last table to a DataFrame
        if tables:
            df_table = pd.DataFrame(tables[-1][1:], columns=tables[-1][0])  # Assuming the first row is the header
        else:
            df_table = pd.DataFrame()

        # If there is remaining text, add it as a new column in the DataFrame
        if not df_table.empty and remaining_text_lines:
            # Create a new DataFrame with the remaining text in a new "Remaining Text" column
            df_text = pd.DataFrame([["" for _ in range(len(df_table.columns))] + [remaining_text_str]],
                                   columns=list(df_table.columns) + ["Remaining Text"])
            df_table = pd.concat([df_table, df_text], ignore_index=True)
        elif remaining_text_lines:
            # If no table, just create a DataFrame with the remaining text
            df_table = pd.DataFrame([[remaining_text_str]], columns=["Remaining Text"])

        # Append the DataFrame to the list
        all_data.append(df_table.reset_index(drop=True))

# Combine all DataFrames into a single DataFrame
combined_df = pd.concat(all_data, ignore_index=True)

# Output the combined DataFrame
print(combined_df)
