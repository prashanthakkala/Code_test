import pdfplumber
from pdfminer.layout import LAParams
import pandas as pd

# Define LAParams with custom values
laparams = LAParams(
    char_margin=2.0,
    line_margin=0.5,
    word_margin=0.1,
    boxes_flow=0.5
)

def is_nearby(y1, y2, tolerance=10):
    """Check if two y-coordinates are within a given tolerance."""
    return abs(y1 - y2) <= tolerance

def merge_last_row_with_table(table, last_row):
    """Merge the last row with the last detected table."""
    if table and last_row:
        table.append(last_row)
    return table

# Initialize an empty list to store tables
all_tables = []

# Open the PDF file
with pdfplumber.open("example.pdf") as pdf:
    for page_num, page in enumerate(pdf.pages):
        # Extract tables
        tables = page.extract_tables({
            "vertical_strategy": "lines",
            "horizontal_strategy": "lines",
            "intersection_tolerance": 5,
            "snap_tolerance": 3,
            "join_tolerance": 3,
            "edge_min_length": 10,
            "min_words_vertical": 1,
            "min_words_horizontal": 1
        })

        # Extract the last row on the page (as text)
        text_rows = page.extract_text(laparams=laparams).splitlines()
        last_row = text_rows[-1] if text_rows else None

        if tables and last_row:
            # Get the Y-coordinate of the last row
            last_row_y = float(page.within_bbox((0, page.height - 20, page.width, page.height)).extract_text().split()[-1])
            
            # Get the bounding box of the last table
            last_table_bbox = page.extract_words()[0]['bottom'] if page.extract_words() else 0

            # Check if the last row is near the table
            if is_nearby(last_table_bbox, last_row_y):
                tables[-1] = merge_last_row_with_table(tables[-1], [last_row])

        # Convert each table to a DataFrame and add to all_tables
        for table in tables:
            df = pd.DataFrame(table[1:], columns=table[0])  # Assuming the first row is the header
            all_tables.append(df)

# Combine all tables into a single DataFrame
combined_df = pd.concat(all_tables, ignore_index=True)

# Output the combined DataFrame
print(combined_df)
