import pdfplumber
from pdfminer.layout import LAParams
import pandas as pd

# Define LAParams with custom values
laparams = LAParams(
    char_margin=2.0,
    line_margin=0.5,
    word_margin=0.1,
    boxes_flow=0.5
)

# Initialize an empty list to store tables and text rows
all_data = []

# Open the PDF file
with pdfplumber.open("example.pdf") as pdf:
    for page_num, page in enumerate(pdf.pages):
        # Extract tables
        tables = page.extract_tables({
            "vertical_strategy": "lines",
            "horizontal_strategy": "lines",
            "intersection_tolerance": 5,
            "snap_tolerance": 3,
            "join_tolerance": 3,
            "edge_min_length": 10,
            "min_words_vertical": 1,
            "min_words_horizontal": 1
        })

        # Extract all text lines on the page
        text_rows = page.extract_text(laparams=laparams).splitlines()

        # Identify the last table's bounding box (bottom y-coordinate)
        if tables:
            last_table_bbox = None
            for table in tables:
                if table and len(table) > 0:
                    # Get the Y-coordinate of the bottom of the last cell of the last row of the last table
                    last_table_bbox = page.extract_words()[-1]['bottom'] if page.extract_words() else 0
                    break
        else:
            last_table_bbox = 0

        # Extract text rows that appear after the last table
        remaining_text = []
        if last_table_bbox is not None:
            for word in page.extract_words():
                if word['bottom'] > last_table_bbox:
                    remaining_text.append(word['text'])

        # Convert tables to DataFrames and add to all_data
        for table in tables:
            df_table = pd.DataFrame(table[1:], columns=table[0])  # Assuming the first row is the header
            all_data.append(df_table.reset_index(drop=True))  # Ensure unique indices

        # If there are remaining text rows, convert to DataFrame and add to all_data
        if remaining_text:
            df_remaining_text = pd.DataFrame([remaining_text], columns=["Remaining Text"])
            all_data.append(df_remaining_text.reset_index(drop=True))  # Ensure unique indices

# Combine all DataFrames into a single DataFrame
combined_df = pd.concat(all_data, ignore_index=True)

# Output the combined DataFrame
print(combined_df)
